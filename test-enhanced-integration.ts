#!/usr/bin/env ts-node

/**
 * Test script for the enhanced Perplexity API integration
 * This demonstrates the new scalable architecture for 13F/VIP person info
 */

import { FinancialIntelligenceService } from './src/services/financial-intelligence-service';
import { BasketStorageService } from './src/storage/basket-storage';
import { config } from './src/config';

async function testEnhancedIntegration() {
  console.log('üöÄ Testing Enhanced Perplexity API Integration for 13F/VIP Features\\n');\n  \n  // Check if Perplexity API key is configured\n  if (!config.perplexityApiKey) {\n    console.error('‚ùå Perplexity API key not configured. Please set PERPLEXITY_API_KEY environment variable.');\n    process.exit(1);\n  }\n  \n  console.log('‚úÖ Perplexity API key configured\\n');\n  \n  try {\n    // Initialize services\n    const basketStorage = new BasketStorageService();\n    const financialIntelligence = new FinancialIntelligenceService(basketStorage, {\n      cacheConfig: {\n        defaultTTL: 1000 * 60 * 60, // 1 hour for testing\n        maxSize: 50 * 1024 * 1024 // 50MB\n      }\n    });\n    \n    console.log('‚úÖ Financial Intelligence Service initialized\\n');\n    \n    // Test 1: Get 13F Portfolio with VIP Profile\n    console.log('üîç Test 1: Fetching 13F Portfolio with VIP Profile');\n    console.log('Institution: Berkshire Hathaway');\n    \n    const portfolioWithVIP = await financialIntelligence.get13FPortfolio('Berkshire Hathaway', {\n      useCache: true,\n      includeAnalytics: true,\n      includeVIPProfile: true,\n      maxHoldings: 10\n    });\n    \n    console.log('‚úÖ Portfolio fetched successfully');\n    console.log(`üìä Holdings count: ${portfolioWithVIP.holdings.length}`);\n    console.log(`üí∞ Total value: $${(portfolioWithVIP.totalValue / 1000000000).toFixed(2)}B`);\n    console.log(`üìÖ Filing date: ${portfolioWithVIP.filingDate}`);\n    \n    if (portfolioWithVIP.vipProfile) {\n      console.log(`üë§ VIP Profile: ${portfolioWithVIP.vipProfile.name}`);\n      console.log(`üè¢ Title: ${portfolioWithVIP.vipProfile.title}`);\n      console.log(`üìà Strategy: ${portfolioWithVIP.vipProfile.strategy.substring(0, 100)}...`);\n    }\n    \n    console.log('\\n' + '='.repeat(60) + '\\n');\n    \n    // Test 2: Get VIP Profile with Portfolio\n    console.log('üîç Test 2: Fetching VIP Profile with Portfolio');\n    console.log('Investor: Warren Buffett');\n    \n    const vipWithPortfolio = await financialIntelligence.getVIPProfile('Warren Buffett', {\n      useCache: true,\n      includePortfolio: true,\n      includePerformance: true\n    });\n    \n    console.log('‚úÖ VIP Profile fetched successfully');\n    console.log(`üë§ Name: ${vipWithPortfolio.name}`);\n    console.log(`üè¢ Firm: ${vipWithPortfolio.firm}`);\n    console.log(`üí° Philosophy: ${vipWithPortfolio.investmentPhilosophy.substring(0, 100)}...`);\n    console.log(`üìä Notable Holdings: ${vipWithPortfolio.notableHoldings.length}`);\n    \n    if (vipWithPortfolio.portfolio) {\n      console.log(`üìà Portfolio Value: $${(vipWithPortfolio.portfolio.totalValue / 1000000000).toFixed(2)}B`);\n    }\n    \n    console.log('\\n' + '='.repeat(60) + '\\n');\n    \n    // Test 3: Search VIPs\n    console.log('üîç Test 3: Searching VIP Investors');\n    console.log('Query: hedge fund managers');\n    \n    const vipSearchResults = await financialIntelligence.searchVIPs('hedge fund managers', {\n      limit: 5,\n      minAUM: 1000000000, // $1B+\n      includePortfolios: false\n    });\n    \n    console.log('‚úÖ VIP search completed');\n    console.log(`üìä Results found: ${vipSearchResults.length}`);\n    \n    vipSearchResults.forEach((result, index) => {\n      console.log(`${index + 1}. ${result.name} - ${result.firm}`);\n      console.log(`   Prominence: ${result.prominence}/100`);\n      if (result.aum) {\n        console.log(`   AUM: $${(result.aum / 1000000000).toFixed(2)}B`);\n      }\n    });\n    \n    console.log('\\n' + '='.repeat(60) + '\\n');\n    \n    // Test 4: Get Trending VIPs\n    console.log('üîç Test 4: Fetching Trending VIP Investors');\n    \n    const trendingVIPs = await financialIntelligence.getTrendingVIPs({\n      limit: 5,\n      timeframe: 'month',\n      includePortfolios: false\n    });\n    \n    console.log('‚úÖ Trending VIPs fetched');\n    console.log(`üìä Trending investors: ${trendingVIPs.length}`);\n    \n    trendingVIPs.forEach((vip, index) => {\n      console.log(`${index + 1}. ${vip.name} - ${vip.firm}`);\n      console.log(`   Recent news: ${vip.recentNews} articles`);\n    });\n    \n    console.log('\\n' + '='.repeat(60) + '\\n');\n    \n    // Test 5: Generate Market Intelligence\n    console.log('üîç Test 5: Generating Market Intelligence Report');\n    \n    const marketIntelligence = await financialIntelligence.generateMarketIntelligence({\n      institutions: ['Berkshire Hathaway', 'Bridgewater Associates', 'BlackRock'],\n      includeInsights: true,\n      timeframe: 'month'\n    });\n    \n    console.log('‚úÖ Market intelligence generated');\n    console.log(`üìä Top movers: ${marketIntelligence.topMovers.length}`);\n    console.log(`üè¢ Institutional trends: ${marketIntelligence.institutionalTrends.length}`);\n    console.log(`üí° Insights: ${marketIntelligence.insights.length}`);\n    \n    console.log('\\nüìà Top 3 Most Held Stocks:');\n    marketIntelligence.topMovers.slice(0, 3).forEach((stock, index) => {\n      console.log(`${index + 1}. ${stock.symbol} (${stock.companyName})`);\n      console.log(`   Held by ${stock.institutionCount} institutions`);\n      console.log(`   Total value: $${(stock.totalValue / 1000000000).toFixed(2)}B`);\n    });\n    \n    console.log('\\nüí° Top 3 Insights:');\n    marketIntelligence.insights.slice(0, 3).forEach((insight, index) => {\n      console.log(`${index + 1}. ${insight.title}`);\n      console.log(`   ${insight.description}`);\n      console.log(`   Impact: ${insight.impact}, Confidence: ${insight.confidence}%`);\n    });\n    \n    console.log('\\n' + '='.repeat(60) + '\\n');\n    \n    // Test 6: Service Statistics\n    console.log('üîç Test 6: Service Statistics');\n    \n    const stats = financialIntelligence.getServiceStats();\n    \n    console.log('‚úÖ Service statistics retrieved');\n    console.log(`üìä Cache entries: ${stats.cache.totalEntries}`);\n    console.log(`üìä Cache hit rate: ${stats.cache.hitRate.toFixed(2)}%`);\n    console.log(`üìä Perplexity requests: ${stats.perplexity.totalRequests}`);\n    console.log(`üìä Perplexity success rate: ${stats.perplexity.successRate.toFixed(2)}%`);\n    console.log(`üìä Average response time: ${stats.perplexity.averageResponseTime.toFixed(0)}ms`);\n    \n    console.log('\\n' + '='.repeat(60) + '\\n');\n    \n    // Test 7: Create Investment Basket\n    console.log('üîç Test 7: Creating Investment Basket');\n    \n    const basketResult = await financialIntelligence.createInvestmentBasket(\n      'Berkshire Hathaway',\n      100000, // $100,000\n      {\n        minHoldingPercent: 1.0,\n        maxPositions: 15,\n        rebalanceThreshold: 0.05\n      }\n    );\n    \n    console.log('‚úÖ Investment basket created');\n    console.log(`üìä Basket ID: ${basketResult.basketId}`);\n    console.log(`üí∞ Total value: $${basketResult.totalValue.toLocaleString()}`);\n    console.log(`üìà Positions: ${basketResult.allocations.length}`);\n    \n    console.log('\\nüìä Top 5 Allocations:');\n    basketResult.allocations.slice(0, 5).forEach((allocation: any, index: number) => {\n      console.log(`${index + 1}. ${allocation.symbol} (${allocation.companyName})`);\n      console.log(`   Target: ${allocation.targetWeight.toFixed(2)}% ($${allocation.targetValue.toLocaleString()})`);\n    });\n    \n    console.log('\\n' + '='.repeat(60) + '\\n');\n    \n    console.log('üéâ All tests completed successfully!');\n    console.log('\\n‚úÖ Enhanced Perplexity API integration is working properly');\n    console.log('‚úÖ VIP investor profiles are being fetched and parsed');\n    console.log('‚úÖ 13F portfolio data is being enriched with VIP information');\n    console.log('‚úÖ Market intelligence is being generated from multiple sources');\n    console.log('‚úÖ Investment baskets can be created from institutional portfolios');\n    console.log('‚úÖ Caching and performance optimization is working');\n    \n  } catch (error) {\n    console.error('‚ùå Test failed:', error);\n    \n    if (error instanceof Error) {\n      console.error('Error details:', error.message);\n      if (error.stack) {\n        console.error('Stack trace:', error.stack);\n      }\n    }\n    \n    process.exit(1);\n  }\n}\n\n// Run the test\nif (require.main === module) {\n  testEnhancedIntegration();\n}\n\nexport { testEnhancedIntegration };